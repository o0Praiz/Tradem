# Backend API Dockerfile
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY src/ ./src/

# Build TypeScript
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Add security and performance optimizations
RUN apk add --no-cache dumb-init && \
    addgroup -g 1001 -S nodejs && \
    adduser -S trades -u 1001 -G nodejs

# Set production environment
ENV NODE_ENV=production
ENV PORT=3000

WORKDIR /app

# Copy built application
COPY --from=builder --chown=trades:nodejs /app/dist ./dist
COPY --from=builder --chown=trades:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=trades:nodejs /app/package*.json ./

# Create uploads and logs directories
RUN mkdir -p uploads logs && chown -R trades:nodejs uploads logs

# Switch to non-root user
USER trades

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js

# Expose port
EXPOSE 3000

# Start application with dumb-init for proper signal handling
CMD ["dumb-init", "node", "dist/server.js"]

---

# Admin Dashboard Dockerfile
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY vite.config.ts ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci && npm cache clean --force

# Copy source code
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./

# Build production bundle
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine AS production

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Add health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:80/health || exit 1

# Create health check endpoint
RUN echo '<!DOCTYPE html><html><body><h1>OK</h1></body></html>' > /usr/share/nginx/html/health

# Expose port
EXPOSE 80

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]

---

# Database Migration Dockerfile
FROM postgres:15-alpine

# Install additional tools
RUN apk add --no-cache curl

# Copy migration scripts
COPY database/migrations/ /docker-entrypoint-initdb.d/
COPY database/schema.sql /docker-entrypoint-initdb.d/01-schema.sql
COPY database/indexes.sql /docker-entrypoint-initdb.d/02-indexes.sql
COPY database/seed.sql /docker-entrypoint-initdb.d/03-seed.sql

# Copy backup and maintenance scripts
COPY scripts/backup.sh /usr/local/bin/
COPY scripts/restore.sh /usr/local/bin/

# Make scripts executable
RUN chmod +x /usr/local/bin/backup.sh /usr/local/bin/restore.sh

---

# Message Service Dockerfile (WebSocket)
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies including development for building
RUN npm ci

# Copy source code
COPY src/ ./src/

# Build application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

RUN apk add --no-cache dumb-init && \
    addgroup -g 1001 -S nodejs && \
    adduser -S trades -u 1001 -G nodejs

ENV NODE_ENV=production
ENV PORT=3001

WORKDIR /app

# Copy built application
COPY --from=builder --chown=trades:nodejs /app/dist ./dist
COPY --from=builder --chown=trades:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=trades:nodejs /app/package*.json ./

USER trades

# Health check for WebSocket service
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD node dist/healthcheck.js

EXPOSE 3001

CMD ["dumb-init", "node", "dist/messaging-server.js"]

---

# Multi-stage build for mobile app build environment
FROM node:18-alpine AS mobile-builder

# Install required packages for React Native
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    openjdk11-jre \
    android-tools

# Install React Native CLI
RUN npm install -g @react-native-community/cli

# Set up Android SDK (for CI/CD builds)
ENV ANDROID_HOME=/opt/android-sdk
ENV PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools

# Create working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY metro.config.js ./
COPY babel.config.js ./

# Install dependencies
RUN npm ci

# Copy source code
COPY src/ ./src/
COPY android/ ./android/
COPY ios/ ./ios/

# Build release APK (Android)
RUN cd android && ./gradlew assembleRelease

# Copy built APK to output directory
RUN mkdir -p /output && \
    cp android/app/build/outputs/apk/release/app-release.apk /output/

---

# Redis Configuration Dockerfile
FROM redis:7-alpine

# Copy custom redis configuration
COPY redis.conf /usr/local/etc/redis/redis.conf

# Create data directory
RUN mkdir -p /data && chown -R redis:redis /data

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD redis-cli ping | grep PONG

# Expose port
EXPOSE 6379

# Start Redis with custom configuration
CMD ["redis-server", "/usr/local/etc/redis/redis.conf"]

---

# Nginx Load Balancer Dockerfile
FROM nginx:alpine

# Install additional tools
RUN apk add --no-cache certbot certbot-nginx

# Copy nginx configuration
COPY nginx/nginx.conf /etc/nginx/nginx.conf
COPY nginx/upstream.conf /etc/nginx/conf.d/upstream.conf
COPY nginx/ssl.conf /etc/nginx/conf.d/ssl.conf

# Copy SSL certificate renewal script
COPY scripts/renew-certs.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/renew-certs.sh

# Create directories for certificates
RUN mkdir -p /etc/letsencrypt /var/lib/letsencrypt

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:80/health || exit 1

EXPOSE 80 443

CMD ["nginx", "-g", "daemon off;"]

---

# Development Environment Dockerfile
FROM node:18-alpine AS development

# Install development tools
RUN apk add --no-cache \
    git \
    curl \
    vim \
    postgresql-client \
    redis

# Install global development packages
RUN npm install -g \
    nodemon \
    typescript \
    @types/node \
    jest \
    eslint \
    prettier

# Set up working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY jest.config.js ./
COPY .eslintrc.js ./
COPY .prettierrc ./

# Install all dependencies (including dev)
RUN npm install

# Create development user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S trades -u 1001 -G nodejs && \
    chown -R trades:nodejs /app

USER trades

# Start development server
CMD ["npm", "run", "dev"]

---

# Docker Compose for local development
version: '3.8'

services:
  # Database
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    environment:
      POSTGRES_DB: trades_platform_dev
      POSTGRES_USER: trades_user
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/backups:/backups
    networks:
      - trades_network

  # Redis Cache
  redis:
    build:
      context: .
      dockerfile: Dockerfile.redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trades_network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    environment:
      NODE_ENV: development
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - trades_network

  # Message Service
  messaging:
    build:
      context: .
      dockerfile: Dockerfile.messaging
      target: development
    environment:
      NODE_ENV: development
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
    ports:
      - "3001:3001"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - trades_network

  # Admin Dashboard
  admin:
    build:
      context: .
      dockerfile: Dockerfile.admin
      target: development
    environment:
      VITE_API_URL: http://localhost:3000/api/v1
      VITE_WS_URL: http://localhost:3001
    ports:
      - "5173:5173"
    volumes:
      - ./admin-dashboard:/app
      - /app/node_modules
    networks:
      - trades_network

  # Load Balancer
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - messaging
      - admin
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - trades_network

volumes:
  postgres_data:
  redis_data:

networks:
  trades_network:
    driver: bridge