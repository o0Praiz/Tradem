# Module: production_deployment_v1
# Version: 1.0.0
# Dependencies: All platform modules
# Provides: Complete production deployment configuration and infrastructure setup
# Integration Points: Cloud infrastructure, CI/CD pipelines, monitoring systems
# Last Updated: 2025-05-31

# =================================================================
# DOCKER CONFIGURATION
# =================================================================

# Backend API Dockerfile
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-dockerfile
data:
  Dockerfile: |
    FROM node:18-alpine AS builder
    
    WORKDIR /app
    COPY package*.json ./
    RUN npm ci --only=production
    
    FROM node:18-alpine AS runtime
    
    RUN apk add --no-cache dumb-init
    ENV NODE_ENV production
    USER node
    
    WORKDIR /app
    COPY --chown=node:node --from=builder /app/node_modules ./node_modules
    COPY --chown=node:node . .
    
    EXPOSE 3000
    CMD ["dumb-init", "node", "server.js"]

---
# Frontend Dockerfile
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-dockerfile
data:
  Dockerfile: |
    FROM node:18-alpine AS builder
    
    WORKDIR /app
    COPY package*.json ./
    RUN npm ci
    
    COPY . .
    RUN npm run build
    
    FROM nginx:alpine AS runtime
    
    COPY --from=builder /app/dist /usr/share/nginx/html
    COPY nginx.conf /etc/nginx/nginx.conf
    
    EXPOSE 80
    CMD ["nginx", "-g", "daemon off;"]

# =================================================================
# KUBERNETES DEPLOYMENT CONFIGURATION
# =================================================================

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: trades-platform

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: trades-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: trades_platform
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: trades-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Backend API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: trades-platform
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: backend-api
        image: trades-platform/backend:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: POSTGRES_HOST
          value: "postgres-service"
        - name: REDIS_HOST
          value: "redis-service"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: stripe-secret
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
# Admin Dashboard Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-dashboard
  namespace: trades-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: admin-dashboard
  template:
    metadata:
      labels:
        app: admin-dashboard
    spec:
      containers:
      - name: admin-dashboard
        image: trades-platform/admin-dashboard:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: trades-platform
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: trades-platform
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: backend-api-service
  namespace: trades-platform
spec:
  selector:
    app: backend-api
  ports:
  - port: 80
    targetPort: 3000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: admin-dashboard-service
  namespace: trades-platform
spec:
  selector:
    app: admin-dashboard
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# Ingress Controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: trades-platform-ingress
  namespace: trades-platform
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.tradesplatform.com
    - admin.tradesplatform.com
    secretName: trades-platform-tls
  rules:
  - host: api.tradesplatform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-api-service
            port:
              number: 80
  - host: admin.tradesplatform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: admin-dashboard-service
            port:
              number: 80

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-api-hpa
  namespace: trades-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

# =================================================================
# PERSISTENT VOLUMES
# =================================================================

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: trades-platform
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

# =================================================================
# SECRETS MANAGEMENT
# =================================================================

---
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
  namespace: trades-platform
type: Opaque
data:
  username: dHJhZGVzX3VzZXI=  # base64 encoded
  password: # Generated secure password, base64 encoded

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: trades-platform
type: Opaque
data:
  jwt-secret: # Generated JWT secret, base64 encoded
  stripe-secret: # Stripe secret key, base64 encoded
  google-maps-key: # Google Maps API key, base64 encoded
  sendgrid-key: # SendGrid API key, base64 encoded
  twilio-auth: # Twilio auth token, base64 encoded

# =================================================================
# MONITORING AND LOGGING
# =================================================================

---
# Prometheus ServiceMonitor
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: trades-platform-metrics
  namespace: trades-platform
spec:
  selector:
    matchLabels:
      app: backend-api
  endpoints:
  - port: metrics
    path: /metrics

---
# Grafana Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: trades-platform-dashboard
  namespace: monitoring
data:
  dashboard.json: |
    {
      "dashboard": {
        "title": "Trades Platform Metrics",
        "panels": [
          {
            "title": "API Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "http_request_duration_seconds{job=\"trades-platform\"}"
              }
            ]
          },
          {
            "title": "Error Rate",
            "type": "graph", 
            "targets": [
              {
                "expr": "rate(http_requests_total{status=~\"5..\"}[5m])"
              }
            ]
          },
          {
            "title": "Active Users",
            "type": "singlestat",
            "targets": [
              {
                "expr": "trades_platform_active_users"
              }
            ]
          }
        ]
      }
    }

# =================================================================
# CI/CD PIPELINE CONFIGURATION
# =================================================================

---
# GitHub Actions Workflow
apiVersion: v1
kind: ConfigMap
metadata:
  name: github-actions-workflow
data:
  ci-cd.yml: |
    name: CI/CD Pipeline
    
    on:
      push:
        branches: [main, develop]
      pull_request:
        branches: [main]
    
    jobs:
      test:
        runs-on: ubuntu-latest
        services:
          postgres:
            image: postgres:15
            env:
              POSTGRES_PASSWORD: postgres
              POSTGRES_DB: trades_platform_test
            options: >-
              --health-cmd pg_isready
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5
        
        steps:
        - uses: actions/checkout@v3
        
        - name: Setup Node.js
          uses: actions/setup-node@v3
          with:
            node-version: '18'
            cache: 'npm'
        
        - name: Install dependencies
          run: npm ci
        
        - name: Run tests
          run: npm test
          env:
            POSTGRES_HOST: localhost
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: trades_platform_test
        
        - name: Run integration tests
          run: npm run test:integration
        
        - name: Security audit
          run: npm audit --audit-level moderate
      
      build-and-deploy:
        needs: test
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        
        steps:
        - uses: actions/checkout@v3
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1
        
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
        
        - name: Build and push backend image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: trades-platform-backend
            IMAGE_TAG: ${{ github.sha }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        - name: Build and push admin dashboard image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: trades-platform-admin
            IMAGE_TAG: ${{ github.sha }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./admin-dashboard
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        - name: Deploy to EKS
          run: |
            aws eks update-kubeconfig --name trades-platform-cluster
            kubectl set image deployment/backend-api backend-api=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n trades-platform
            kubectl set image deployment/admin-dashboard admin-dashboard=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n trades-platform
            kubectl rollout status deployment/backend-api -n trades-platform
            kubectl rollout status deployment/admin-dashboard -n trades-platform

# =================================================================
# TERRAFORM INFRASTRUCTURE
# =================================================================

---
# Terraform Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: terraform-config
data:
  main.tf: |
    terraform {
      required_providers {
        aws = {
          source  = "hashicorp/aws"
          version = "~> 5.0"
        }
        kubernetes = {
          source  = "hashicorp/kubernetes"
          version = "~> 2.20"
        }
      }
      
      backend "s3" {
        bucket = "trades-platform-terraform-state"
        key    = "infrastructure/terraform.tfstate"
        region = "us-east-1"
      }
    }
    
    provider "aws" {
      region = var.aws_region
    }
    
    # EKS Cluster
    module "eks" {
      source = "terraform-aws-modules/eks/aws"
      
      cluster_name    = "trades-platform-cluster"
      cluster_version = "1.27"
      
      vpc_id     = module.vpc.vpc_id
      subnet_ids = module.vpc.private_subnets
      
      cluster_endpoint_private_access = true
      cluster_endpoint_public_access  = true
      
      node_groups = {
        main = {
          desired_capacity = 3
          max_capacity     = 10
          min_capacity     = 2
          
          instance_types = ["t3.medium"]
          
          k8s_labels = {
            Environment = var.environment
            Application = "trades-platform"
          }
        }
      }
    }
    
    # VPC
    module "vpc" {
      source = "terraform-aws-modules/vpc/aws"
      
      name = "trades-platform-vpc"
      cidr = "10.0.0.0/16"
      
      azs             = ["us-east-1a", "us-east-1b", "us-east-1c"]
      private_subnets = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
      public_subnets  = ["10.0.101.0/24", "10.0.102.0/24", "10.0.103.0/24"]
      
      enable_nat_gateway = true
      enable_vpn_gateway = false
      
      enable_dns_hostnames = true
      enable_dns_support   = true
    }
    
    # RDS PostgreSQL
    module "rds" {
      source = "terraform-aws-modules/rds/aws"
      
      identifier = "trades-platform-db"
      
      engine         = "postgres"
      engine_version = "15.3"
      instance_class = "db.t3.medium"
      
      allocated_storage     = 20
      max_allocated_storage = 100
      
      db_name  = "trades_platform"
      username = "trades_user"
      password = var.db_password
      
      vpc_security_group_ids = [module.security_group_rds.security_group_id]
      subnet_ids            = module.vpc.database_subnets
      
      backup_retention_period = 7
      backup_window          = "03:00-04:00"
      maintenance_window     = "sun:04:00-sun:05:00"
      
      skip_final_snapshot = false
      deletion_protection = true
      
      performance_insights_enabled = true
      monitoring_interval          = 60
      
      tags = {
        Environment = var.environment
        Application = "trades-platform"
      }
    }
    
    # ElastiCache Redis
    module "redis" {
      source = "terraform-aws-modules/elasticache/aws"
      
      cluster_id         = "trades-platform-redis"
      engine             = "redis"
      node_type          = "cache.t3.micro"
      num_cache_nodes    = 1
      parameter_group    = "default.redis7"
      port               = 6379
      
      subnet_group_name  = module.vpc.elasticache_subnet_group_name
      security_group_ids = [module.security_group_redis.security_group_id]
      
      at_rest_encryption_enabled = true
      transit_encryption_enabled = true
      
      tags = {
        Environment = var.environment
        Application = "trades-platform"
      }
    }

  variables.tf: |
    variable "aws_region" {
      description = "AWS region"
      default     = "us-east-1"
    }
    
    variable "environment" {
      description = "Environment name"
      default     = "production"
    }
    
    variable "db_password" {
      description = "RDS master password"
      type        = string
      sensitive   = true
    }

# =================================================================
# BACKUP AND DISASTER RECOVERY
# =================================================================

---
# Database Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: trades-platform
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            command:
            - /bin/sh
            - -c
            - |
              pg_dump postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$POSTGRES_DB | \
              gzip > /backup/backup-$(date +%Y%m%d-%H%M%S).sql.gz
              aws s3 cp /backup/ s3://trades-platform-backups/database/ --recursive
            env:
            - name: POSTGRES_HOST
              value: "postgres-service"
            - name: POSTGRES_DB
              value: "trades_platform"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: password
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
          volumes:
          - name: backup-storage
            emptyDir: {}
          restartPolicy: OnFailure

# =================================================================
# NGINX CONFIGURATION
# =================================================================

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        
        server {
            listen 80;
            server_name localhost;
            
            root /usr/share/nginx/html;
            index index.html;
            
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # Handle client-side routing
            location / {
                try_files $uri $uri/ /index.html;
            }
            
            # Health check
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }